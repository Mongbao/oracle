--相關檢視
select * from dba_jobs;
select * from all_jobs;
select * from user_jobs;

--查詢欄位描述
欄位         型別             描述
JOB         NUMBER          任務的唯一標示號
LOG_USER    VARCHAR2(30)    提交任務使用者
PRIV_USER   VARCHAR2(30)    賦予任務許可權的使用者
SCHEMA_USER VARCHAR2(30)    對任務作語法分析的使用者模式
LAST_DATE   DATE            最後一次成功執行任務時間
LAST_SEC    VARCHAR2(8)     如HH24:MM:SS格式的last_date日期的小時分鐘和秒
THIS_DATE   DATE            正在執行任務的開始時間，如果沒有執行任務則為null
THIS_SEC    VARCHAR2(8)     如HH24:MM:SS格式的this_date日期的小時分鐘和秒
NEXT_DATE   DATE            下一次定時執行任務的時間
NEXT_SEC    VARCHAR2(8)     如HH24:MM:SS格式的next_date日期的小時分鐘和秒
TOTAL_TIME  NUMBER          該任務執行所需要的總時間，單位為秒
BROKEN      VARCHAR2(200)   用於計算下一執行時間的表示式
FAILURES    NUMBER          任務執行連續沒有成功的次數
WHAT        VARCHAR2(2000)  執行任務的PL/SQL塊
CURRENT_SESSION_LABELRAW  VARCHAR2(2000)  任務執行的NLS會話設定
CLEARANCE_HI  RAL MLSLABEL  該任務可信任的Oracle最大間隙
CLEARANCE_LO  RAW           MLSLABEL該任務可信任的Oracle最小間隙
NLS_ENV     VARCHAR2(2000)  任務執行的NLS會話設定
MISC_ENV    RAW(32)         任務執行的其他一些會話引數

--正在執行job
select * from dba_jobs_running;
--其中最重要的欄位就是job這個值就是操作job的id號，what操作儲存過程的名稱，next_date執行的時間，interval執行間隔

執行間隔interval執行頻率
描述                INTERVAL引數值
每天午夜12點         TRUNC(SYSDATE+1)
每天早上8點30分      TRUNC(SYSDATE+1) + (8*60+30) /(24*60)
每星期二中午12點      NEXT_DAY(TRUNC(SYSDATE),"TURESDAY")+12/24
每個月第一天的午夜12點  TRUNC(LAST_DAY(SYSDATE)+1)
每個季度最後一天晚上11點 TRUNC(ADD_MONTHS(SYSDATE+2/24,3),'Q')-1/24
每星期六和日早上6點10分   TRUNC(LEAST(NEXT_DAY(SYSDATE,"SATURDAY"),NEXT_DAY(SYSDATE,"SUNDAY")))+(6*60+10) / (24*60)
每秒鐘執行次          INTERVAL => sysdate+1/(24*60*60)
如果改成TRUNC(sysdate,'mi')+10/(24*60)就是每10分鐘執行次

每天定時執行
每天凌晨一點執行      Interval => TRUNC(next_day(sysdate,'星期一'))+1/24
每月定時執行
每月一日凌晨一點執行   Interval => TRUNC(LAST_DAY(SYSDATE))+1+1/24
每季定時執行
每季第一天凌晨一點執行 Interval => TRUNC(ADD_MONTHS(SYSDATE,3),'Q')+1/24
每半年定時執行
每年七月一日和一月一日凌晨一點 Interval => ADD_MONTHS(TRUNC(SYSDATE,'YYYY'),6)+1/24
每年定時執行
每年一月一日凌晨一點執行  Interval => ADD_MONTHS(TRUNC(SYSDATE,'YYYY'),12)+1/24

建立job基本語法
DECLARE
  variable job number;
BEGIN
  sys.dbms_job.submit(job => :job,
  what => 'prc_name;',                --執行的儲存過程名字
  next_date => to_date('22-11-201309:08:41','dd-mm-yyyy hh24:mi:ss'),
  interval => 'sysdate+1/86400');     --每天86400秒，即一秒鐘執行prc_name過程一次
  commit;
end;
使用dbms_job.submit方法過程，有五個引數：job,what,next_date,interval,noparse

dbms_job.submit(job           OUT binary_integer,
                what          IN varchar2,
                next_date     IN date,
                interval      IN varchar2,
                no_parse      IN booean := FALSE)
job引數是輸出引數，由submit()過程返回binary_integer，這個值用來唯一標示一個工作。
一般定義一個變數接收，可以去user_jobs檢視查詢job值
what引數是將被執行的PL/SQL程式碼塊，儲存過程名稱等
next_date引數指示何時將執行這個工作
interval引數何時這個工作將被重新執行
no_parse引數指示此工作在提交時或執行時是否應進行語法分析-true，預設值false。
指示此PL/SQL程式碼在它第一次執行時應進行語法分析，而FALSE指示本PL/SQL程式碼應立即進行語法分析

其他job相關的儲存過程
在dbms_job這個package中還有其他的過程：broken,change,interval,isubmit,next_date,remove,run,submit,user_export,what;

https://www.796t.com/content/1541780593.html
